service: school-web

provider:
  name: aws
  region: ${opt:region, 'ap-northeast-1'}
  stage: ${opt:stage, 'dev'}
  dns: ${opt:dns, 'web.vclogitech.com'}

# AWS CloudFormation templates
resources:
  Mappings:
    Region2S3WebsiteSuffix: # todo update mapping
      us-east-1:
        Suffix: .s3-website-us-east-1.amazonaws.com
      us-west-1:
        Suffix: .s3-website-us-west-1.amazonaws.com
      us-west-2:
        Suffix: .s3-website-us-west-2.amazonaws.com
      eu-west-1:
        Suffix: .s3-website-eu-west-1.amazonaws.com
      ap-northeast-1:
        Suffix: .s3-website-ap-northeast-1.amazonaws.com
      ap-northeast-2:
        Suffix: .s3-website-ap-northeast-2.amazonaws.com
      ap-southeast-1:
        Suffix: .s3-website-ap-southeast-1.amazonaws.com
      ap-southeast-2:
        Suffix: .s3-website-ap-southeast-2.amazonaws.com
      ap-south-1:
        Suffix: .s3-website-ap-south-1.amazonaws.com
      us-east-2:
        Suffix: .s3-website-us-east-2.amazonaws.com
      sa-east-1:
        Suffix: .s3-website-sa-east-1.amazonaws.com
      cn-north-1:
        Suffix: .s3-website.cn-north-1.amazonaws.com.cn
      eu-central-1:
        Suffix: .s3-website.eu-central-1.amazonaws.com
  Resources:
    S3BucketForWebsiteContent:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: !Join ["-", ['${self:service}','${self:provider.stage}', Ref: 'AWS::AccountId']]
        WebsiteConfiguration:
          IndexDocument: index.html
        CorsConfiguration:
          CorsRules:
          -
            AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*'] #todo
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: "S3BucketForWebsiteContent"
        PolicyDocument:
          Statement:
          -
            Action:
            - "s3:GetObject"
            Effect: "Allow"
            Resource:
              !Join ['', ['arn:aws:s3:::', !Ref 'S3BucketForWebsiteContent", "/*']]
            Principal: {
              "Service": 'cloudfront.amazonaws.com'
            }

    WebsiteCDN:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CDN for S3-backed website
          Aliases:
          - !Join ['', ['${self:provider.dns}']]
          Enabled: 'true'
          DefaultCacheBehavior:
            TargetOriginId: S3BucketForWebsiteContent
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Origins:
          - CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
            DomainName: !Join ['', [!Ref 'S3BucketForWebsiteContent', !FindInMap [Region2S3WebsiteSuffix,
                                                                                  !Ref 'AWS::Region', Suffix]]]
            Id: S3BucketForWebsiteContent
    WebsiteDNSName:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: !Join ['', ['${self:provider.dns}']]
        AliasTarget:
         DNSName: !GetAtt [WebsiteCDN, DomainName]
         EvaluateTargetHealth: true
         HostedZoneId: "Z2FDTNDATAQYW2"
        Comment: CNAME redirect custom name to CloudFront distribution
        Name:  '${self:provider.dns}'
        Type: A
  Outputs:
    WebsiteURL:
      Value: !Join ['', ['http://', '${self:provider.dns}']]
      Description: The URL of the newly created website
    BucketName:
      Value: !Ref 'S3BucketForWebsiteContent'
      Description: Name of S3 bucket to hold website content

